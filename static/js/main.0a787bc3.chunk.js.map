{"version":3,"sources":["components/Container.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-types.js","components/ContactForm/ContactForm.js","components/ContactList/ContactListItem.js","redux/contacts/contacts-selector.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Container.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","payload","name","number","id","uuidv4","deleteContact","handleFilterChange","ContactForm","useState","setName","setNumber","dispatch","useDispatch","handleAllInputChange","e","currentTarget","value","reset","className","onSubmit","preventDefault","trim","onChange","type","pattern","title","required","placeholder","ContactListItem","props","onClick","getVisibleContacts","state","contacts","items","getContacts","filter","getFilter","normalizeFilter","toLowerCase","contact","includes","ContactList","useSelector","map","Filter","target","Container","children","s","container","App","itemsReducer","createReducer","some","alert","item","filterReducer","_","combineReducers","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","persistor","persistStore","reactDom","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.0a787bc3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3YB13\",\"title\":\"Container_title__2gV2z\"};","import { v4 as uuidv4 } from \"uuid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\nimport {ADDCONTACT, DELETECONTACT, FILTER} from \"./contacts-types\"\r\n\r\nexport const addContact = createAction(\r\n  ADDCONTACT,\r\n  ({ name, number }) => {\r\n    return {\r\n        payload: {\r\n            name,\r\n            number,\r\n            id: uuidv4()\r\n        },\r\n    };\r\n  }\r\n);\r\n\r\nexport const deleteContact = createAction(DELETECONTACT);\r\nexport const handleFilterChange = createAction(FILTER);\r\n","const ADDCONTACT = \"contact/addContact\";\r\nconst DELETECONTACT = \"contact/deleteContact\";\r\nconst FILTER = \"contact/filter\";\r\n\r\nexport {ADDCONTACT, DELETECONTACT, FILTER}","import { useState } from \"react\";\r\nimport \"./ContactForm.scss\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addContact } from \"../../redux/contacts/contacts-actions\";\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const handleAllInputChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  // функция записи новых абонентов в телефонную книгу\r\n  const handlePushContact = (e) => {\r\n    e.preventDefault();\r\n    if (name.trim() === \"\") return;\r\n\r\n    dispatch(addContact(({ name, number })));\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setNumber(\"\");\r\n    setName(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"form__container\">\r\n      <form onSubmit={handlePushContact}>\r\n        <label className=\"label\">\r\n          Name\r\n          <input\r\n            className=\"input\"\r\n            value={name}\r\n            onChange={handleAllInputChange}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            placeholder=\"Enter Name\"\r\n          />\r\n        </label>\r\n        <label className=\"label\">\r\n          Number\r\n          <input\r\n            className=\"input\"\r\n            type=\"tel\"\r\n            value={number}\r\n            onChange={handleAllInputChange}\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            placeholder=\"Enter Number\"\r\n          />\r\n        </label>\r\n        <button className=\"add__button\">Add contact</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types'\r\nimport { useDispatch} from \"react-redux\";\r\nimport { deleteContact } from '../../redux/contacts/contacts-actions';\r\n\r\nexport default function ContactListItem(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { name, number, id } = props;\r\n  return (\r\n    <>\r\n      <span>{name}: </span>\r\n      <span>{number} </span>\r\n      <button\r\n        className=\"button__delete\"\r\n        type=\"button\"\r\n        onClick={() => dispatch(deleteContact(id))}\r\n      >\r\n        delete\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nContactListItem.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n}","const getContacts = (state) => state.contacts.items;\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizeFilter = filter.toLowerCase();\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizeFilter)\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"./ContactList.scss\";\nimport ContactListItem from \"./ContactListItem\";\nimport { useSelector } from \"react-redux\";\nimport { getVisibleContacts } from \"../../redux/contacts/contacts-selector\";\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts)\n  return (\n    <ul className=\"Contact__list\">\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <li key={id} className=\"Contact__item\">\n            <ContactListItem\n              name={name}\n              number={number}\n              id={id}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nexport default ContactList;","import { useSelector, useDispatch } from \"react-redux\";\nimport { handleFilterChange } from \"../../redux/contacts/contacts-actions\";\n\nconst Filter = () => {\n  const filter = useSelector((state) => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className=\"label\">\n      Find contacts by name\n      <input\n        className=\"input\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={(e) => dispatch(handleFilterChange(e.target.value))}\n        placeholder=\"Enter search name\"\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n\n","import s from './Container.module.css';\n\nexport default function Container({ children }) {\n  return (\n    <div className={s.container}>\n      <h1 className={s.title}>Phonebook</h1>\n      {children}\n    </div>\n  );\n}\n","import ContactForm from \"./components/ContactForm\";\r\nimport ContactList from \"./components/ContactList\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport Container from \"./components/Container\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Container>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter/>\r\n      <ContactList/>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addContact, deleteContact, handleFilterChange } from \"./contacts-actions\";\r\n\r\nconst itemsReducer = createReducer([], {\r\n    [addContact]: (state, { payload }) => {\r\n        if (state.some((e) => e.name.includes(payload.name))) {\r\n        alert(`${payload.name} is already in contacts`);\r\n        return state;\r\n        }\r\n        return [payload, ...state];\r\n    },\r\n    [deleteContact]: (state, { payload }) => {\r\n        state = state.filter((item) => item.id !== payload);\r\n        return state\r\n    }\r\n})\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n    [handleFilterChange]: (_, { payload }) => {\r\n        return payload;\r\n    }\r\n})\r\n\r\nexport default combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n})","import contactsReducer from \"./contacts/contacts-reducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport logger from 'redux-logger'\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst persistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n  contacts: persistReducer(persistConfig, contactsReducer)\r\n},\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }).concat(logger)\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import reactDom from \"react-dom\";\r\nimport App from \"./App\";\r\nimport {store, persistor} from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"modern-normalize/modern-normalize.css\";\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nreactDom.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n    <App />\r\n    </PersistGate>\r\n </Provider >\r\n  ,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}